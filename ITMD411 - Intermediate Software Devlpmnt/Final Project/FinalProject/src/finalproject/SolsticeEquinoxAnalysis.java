/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package finalproject;

import CRUD.UtilityFunctions;
import domain.DaylightRecord;
import domain.Equinox;
import domain.PersistentObject;
import domain.Record;
import domain.SummerSolstice;
import domain.VernalEquinox;
import domain.WinterSolstice;
import domain.util.MP2Utilities;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This class is the main driver class which has access to all the Swing Controls in order to 
 * design the required CRUD and Persistence Operations GUI
 * @author Tejal
 */
public class SolsticeEquinoxAnalysis extends javax.swing.JFrame {

    /**
     * Creates new form SolsticeEquinoxAnalysis
     */
    public SolsticeEquinoxAnalysis() {
        createTable();
        populateTable();

        initComponents();
    }
    
    private Date date;
    private PersistentObject pObject,pObject1;
    private Date start_time,end_time;
    private StringBuilder sb;
    private List list;
        //Recording the start of serialization...
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainContainer = new javax.swing.JPanel();
        MenuContainer = new javax.swing.JTabbedPane();
        CRUD = new javax.swing.JPanel();
        StatusLabel = new javax.swing.JLabel();
        panelretrievedaymonth = new javax.swing.JPanel();
        DayText = new javax.swing.JTextField();
        MonthText = new javax.swing.JTextField();
        retrievedaymonth = new javax.swing.JButton();
        retrieveall = new javax.swing.JButton();
        panelupdate = new javax.swing.JPanel();
        UpdateButton = new javax.swing.JButton();
        UpdateMonthText = new javax.swing.JTextField();
        UpdateDayText = new javax.swing.JTextField();
        UpdateRiseText = new javax.swing.JTextField();
        UpdateSetText = new javax.swing.JTextField();
        UpdateMonthLabel = new javax.swing.JLabel();
        UpdateDayLabel = new javax.swing.JLabel();
        UpdateRiseLabel = new javax.swing.JLabel();
        UpdateSetLabel = new javax.swing.JLabel();
        CreatePanel = new javax.swing.JPanel();
        create = new javax.swing.JButton();
        CreateMonthLabel = new javax.swing.JLabel();
        CreateDayLabel = new javax.swing.JLabel();
        CreateRiseLabel = new javax.swing.JLabel();
        CreateSetLabel = new javax.swing.JLabel();
        CreateMonthText = new javax.swing.JTextField();
        CreateDayText = new javax.swing.JTextField();
        CreateRiseText = new javax.swing.JTextField();
        CreateSetText = new javax.swing.JTextField();
        DeletePanel = new javax.swing.JPanel();
        DeleteMonth = new javax.swing.JTextField();
        DeleteDay = new javax.swing.JTextField();
        Delete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Reset = new javax.swing.JButton();
        Serialization = new javax.swing.JPanel();
        SerializationPanel = new javax.swing.JPanel();
        Readcsv = new javax.swing.JButton();
        Serialize = new javax.swing.JButton();
        Deserialize = new javax.swing.JButton();
        TimeDifference = new javax.swing.JButton();
        TimeDifferenceLabel = new javax.swing.JLabel();
        DataAnalyticsPanel = new javax.swing.JPanel();
        WinterSolsticeLabel = new javax.swing.JLabel();
        SummerSolsticeLabel = new javax.swing.JLabel();
        VernalEquinoxLabel = new javax.swing.JLabel();
        AutumnalEquinoxLabel = new javax.swing.JLabel();
        WinterSolsticeText = new javax.swing.JTextField();
        SummerSolsticeText = new javax.swing.JTextField();
        VernalEquinoxText = new javax.swing.JTextField();
        AutumnalEquinoxText = new javax.swing.JTextField();
        DateLabel = new javax.swing.JLabel();
        ExecuteDataAnalytics = new javax.swing.JButton();
        WriteFileButton = new javax.swing.JButton();
        CreateCSV = new javax.swing.JButton();
        LabelStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ITM 411 Final Project ");
        setName("FinalProject"); // NOI18N

        MainContainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        MainContainer.setName("Read Data"); // NOI18N

        MenuContainer.setBackground(new java.awt.Color(204, 204, 255));

        CRUD.setBackground(new java.awt.Color(204, 204, 255));
        CRUD.setPreferredSize(new java.awt.Dimension(30000, 30000));

        panelretrievedaymonth.setBorder(javax.swing.BorderFactory.createTitledBorder("Retrieve By Day and Month"));

        DayText.setText("Day?");

        MonthText.setText("Month Number? ");

        retrievedaymonth.setText("Retrieve");
        retrievedaymonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retrievedaymonthActionPerformed(evt);
            }
        });

        retrieveall.setText("Retrieve All");
        retrieveall.setToolTipText("");
        retrieveall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retrieveallActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelretrievedaymonthLayout = new javax.swing.GroupLayout(panelretrievedaymonth);
        panelretrievedaymonth.setLayout(panelretrievedaymonthLayout);
        panelretrievedaymonthLayout.setHorizontalGroup(
            panelretrievedaymonthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelretrievedaymonthLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DayText, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MonthText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(retrievedaymonth, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(retrieveall, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelretrievedaymonthLayout.setVerticalGroup(
            panelretrievedaymonthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelretrievedaymonthLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelretrievedaymonthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DayText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MonthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(retrievedaymonth)
                    .addComponent(retrieveall))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        panelupdate.setBorder(javax.swing.BorderFactory.createTitledBorder("Update Records"));

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        UpdateRiseText.setText("eg: 0733");

        UpdateSetText.setText("eg: 1833");

        UpdateMonthLabel.setText("Month Number: ");

        UpdateDayLabel.setText("Day: ");

        UpdateRiseLabel.setText("Rise: ");

        UpdateSetLabel.setText("Set: ");

        javax.swing.GroupLayout panelupdateLayout = new javax.swing.GroupLayout(panelupdate);
        panelupdate.setLayout(panelupdateLayout);
        panelupdateLayout.setHorizontalGroup(
            panelupdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelupdateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelupdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelupdateLayout.createSequentialGroup()
                        .addComponent(UpdateDayLabel)
                        .addGap(55, 55, 55))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelupdateLayout.createSequentialGroup()
                        .addComponent(UpdateMonthLabel)
                        .addGap(18, 18, 18)))
                .addGroup(panelupdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UpdateMonthText)
                    .addComponent(UpdateDayText, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panelupdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UpdateSetLabel)
                    .addComponent(UpdateRiseLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelupdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UpdateSetText, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(UpdateRiseText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(UpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelupdateLayout.setVerticalGroup(
            panelupdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelupdateLayout.createSequentialGroup()
                .addGroup(panelupdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelupdateLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelupdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UpdateMonthLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelupdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(UpdateMonthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(UpdateRiseLabel)
                                .addComponent(UpdateRiseText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelupdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(UpdateDayText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UpdateDayLabel)
                            .addComponent(UpdateSetLabel)
                            .addComponent(UpdateSetText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelupdateLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(UpdateButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CreatePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Create Record"));

        create.setText("Create Record");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        CreateMonthLabel.setText("Month Number: ");

        CreateDayLabel.setText("Day: ");

        CreateRiseLabel.setText("Rise: ");

        CreateSetLabel.setText("Set: ");

        CreateRiseText.setText("eg: 0733");
        CreateRiseText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateRiseTextActionPerformed(evt);
            }
        });

        CreateSetText.setText("eg: 1833");

        javax.swing.GroupLayout CreatePanelLayout = new javax.swing.GroupLayout(CreatePanel);
        CreatePanel.setLayout(CreatePanelLayout);
        CreatePanelLayout.setHorizontalGroup(
            CreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CreateMonthLabel)
                    .addComponent(CreateDayLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreatePanelLayout.createSequentialGroup()
                        .addComponent(CreateDayText, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CreateSetLabel))
                    .addGroup(CreatePanelLayout.createSequentialGroup()
                        .addComponent(CreateMonthText, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CreateRiseLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CreateRiseText, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                    .addComponent(CreateSetText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(create)
                .addContainerGap())
        );
        CreatePanelLayout.setVerticalGroup(
            CreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreatePanelLayout.createSequentialGroup()
                .addGroup(CreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreatePanelLayout.createSequentialGroup()
                        .addGroup(CreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CreateMonthLabel)
                            .addComponent(CreateMonthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CreateRiseLabel)
                            .addComponent(CreateRiseText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CreateDayLabel)
                            .addComponent(CreateDayText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CreateSetLabel)
                            .addComponent(CreateSetText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(CreatePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(create)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        DeletePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Delete Records"));

        DeleteMonth.setText("Month Number?");

        DeleteDay.setText("Day?");

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DeletePanelLayout = new javax.swing.GroupLayout(DeletePanel);
        DeletePanel.setLayout(DeletePanelLayout);
        DeletePanelLayout.setHorizontalGroup(
            DeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeletePanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(DeleteDay, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DeleteMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        DeletePanelLayout.setVerticalGroup(
            DeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeletePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Delete))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(469, 402));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setMaximumSize(new java.awt.Dimension(800, 800));
        jTable1.setPreferredSize(new java.awt.Dimension(800, 800));
        jScrollPane1.setViewportView(jTable1);

        Reset.setText("Reset Table Data");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CRUDLayout = new javax.swing.GroupLayout(CRUD);
        CRUD.setLayout(CRUDLayout);
        CRUDLayout.setHorizontalGroup(
            CRUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CRUDLayout.createSequentialGroup()
                .addGroup(CRUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CRUDLayout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(StatusLabel))
                    .addGroup(CRUDLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(CRUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CRUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(panelretrievedaymonth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(panelupdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(DeletePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CreatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Reset))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        CRUDLayout.setVerticalGroup(
            CRUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CRUDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CRUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CRUDLayout.createSequentialGroup()
                        .addComponent(CreatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelretrievedaymonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelupdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeletePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Reset))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        MenuContainer.addTab("CRUD Operations", CRUD);

        Serialization.setBackground(new java.awt.Color(204, 204, 255));

        SerializationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Serialization / Deserialization"));

        Readcsv.setText("Read Table Data ");
        Readcsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadcsvActionPerformed(evt);
            }
        });

        Serialize.setText("Serialize");
        Serialize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SerializeActionPerformed(evt);
            }
        });

        Deserialize.setText("Deserialize");
        Deserialize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeserializeActionPerformed(evt);
            }
        });

        TimeDifference.setText("Display Delta Time");
        TimeDifference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeDifferenceActionPerformed(evt);
            }
        });

        TimeDifferenceLabel.setText("Delta Time : ");

        javax.swing.GroupLayout SerializationPanelLayout = new javax.swing.GroupLayout(SerializationPanel);
        SerializationPanel.setLayout(SerializationPanelLayout);
        SerializationPanelLayout.setHorizontalGroup(
            SerializationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SerializationPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(Readcsv, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Serialize, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Deserialize, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(TimeDifference)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TimeDifferenceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                .addContainerGap())
        );
        SerializationPanelLayout.setVerticalGroup(
            SerializationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SerializationPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(SerializationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Readcsv)
                    .addComponent(Serialize)
                    .addComponent(Deserialize)
                    .addComponent(TimeDifference)
                    .addComponent(TimeDifferenceLabel))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        DataAnalyticsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Analytics"));

        WinterSolsticeLabel.setText("Winter Solstice :");

        SummerSolsticeLabel.setText("Summer Solstice : ");

        VernalEquinoxLabel.setText("Vernal Equinox : ");

        AutumnalEquinoxLabel.setText("Autumnal Equinox :");

        WinterSolsticeText.setText("             ");

        SummerSolsticeText.setText("               ");

        AutumnalEquinoxText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutumnalEquinoxTextActionPerformed(evt);
            }
        });

        DateLabel.setText("Date in 2013");

        ExecuteDataAnalytics.setText("Execute");
        ExecuteDataAnalytics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteDataAnalyticsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DataAnalyticsPanelLayout = new javax.swing.GroupLayout(DataAnalyticsPanel);
        DataAnalyticsPanel.setLayout(DataAnalyticsPanelLayout);
        DataAnalyticsPanelLayout.setHorizontalGroup(
            DataAnalyticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DataAnalyticsPanelLayout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addGroup(DataAnalyticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(WinterSolsticeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SummerSolsticeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VernalEquinoxLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AutumnalEquinoxLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                .addGroup(DataAnalyticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DataAnalyticsPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(DateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DataAnalyticsPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(DataAnalyticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AutumnalEquinoxText)
                            .addComponent(VernalEquinoxText)
                            .addComponent(SummerSolsticeText)
                            .addComponent(WinterSolsticeText))
                        .addGap(115, 115, 115)
                        .addComponent(ExecuteDataAnalytics, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DataAnalyticsPanelLayout.setVerticalGroup(
            DataAnalyticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DataAnalyticsPanelLayout.createSequentialGroup()
                .addComponent(DateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DataAnalyticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WinterSolsticeLabel)
                    .addComponent(WinterSolsticeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DataAnalyticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SummerSolsticeLabel)
                    .addComponent(SummerSolsticeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExecuteDataAnalytics))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DataAnalyticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VernalEquinoxLabel)
                    .addComponent(VernalEquinoxText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DataAnalyticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AutumnalEquinoxLabel)
                    .addComponent(AutumnalEquinoxText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        WriteFileButton.setText("Write Data To File");
        WriteFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WriteFileButtonActionPerformed(evt);
            }
        });

        CreateCSV.setText("Create .CSV File");
        CreateCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateCSVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SerializationLayout = new javax.swing.GroupLayout(Serialization);
        Serialization.setLayout(SerializationLayout);
        SerializationLayout.setHorizontalGroup(
            SerializationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SerializationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SerializationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SerializationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DataAnalyticsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(SerializationLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(CreateCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(WriteFileButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SerializationLayout.setVerticalGroup(
            SerializationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SerializationLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(SerializationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(SerializationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateCSV)
                    .addComponent(WriteFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(DataAnalyticsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
        );

        MenuContainer.addTab("Persistence Operations", Serialization);

        LabelStatus.setText("Status: ");

        javax.swing.GroupLayout MainContainerLayout = new javax.swing.GroupLayout(MainContainer);
        MainContainer.setLayout(MainContainerLayout);
        MainContainerLayout.setHorizontalGroup(
            MainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainContainerLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(LabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(388, Short.MAX_VALUE))
            .addComponent(MenuContainer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        MainContainerLayout.setVerticalGroup(
            MainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainContainerLayout.createSequentialGroup()
                .addComponent(MenuContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelStatus)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(MainContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        int month, day, rise, set;
        if (CreateMonthText.getText().matches("[0-9]+") && CreateDayText.getText().matches("[0-9]+") && CreateRiseText.getText().matches("[0-9]+") && CreateSetText.getText().matches("[0-9]+")) {
            month = Integer.parseInt(CreateMonthText.getText());
            day = Integer.parseInt(CreateDayText.getText());
            rise = Integer.parseInt(CreateRiseText.getText());
            set = Integer.parseInt(CreateSetText.getText());
            String msg = UtilityFunctions.createRecord(jTable1, month, day, rise, set);
            LabelStatus.setText(msg);
        } else {
            LabelStatus.setText("Status: Enter numeric input only!eg:for MAY=05");
        }
        CreateMonthText.setText("");
        CreateDayText.setText("");
        CreateRiseText.setText("");
        CreateSetText.setText("");
    }//GEN-LAST:event_createActionPerformed

    private void retrieveallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retrieveallActionPerformed
        String msg = UtilityFunctions.retrieveRecords(jTable1);
        LabelStatus.setText(msg);
    }//GEN-LAST:event_retrieveallActionPerformed

    private void CreateRiseTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateRiseTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateRiseTextActionPerformed

    private void AutumnalEquinoxTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutumnalEquinoxTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AutumnalEquinoxTextActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        populateTable();
        LabelStatus.setText("Status: Table Reset Successful!");
    }//GEN-LAST:event_ResetActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed

        int month, day;
        if (DeleteMonth.getText().matches("[0-9]+") && DeleteDay.getText().matches("[0-9]+")) {
            month = Integer.parseInt(DeleteMonth.getText());
            day = Integer.parseInt(DeleteDay.getText());
            String msg = UtilityFunctions.deleteRecord(jTable1, month, day);
            LabelStatus.setText(msg);
        } else {
            LabelStatus.setText("Status: Enter numeric input only!eg:for MAY=05");
        }
        DeleteMonth.setText("Month Number?");
        DeleteDay.setText("Day?");
    }//GEN-LAST:event_DeleteActionPerformed

    private void retrievedaymonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retrievedaymonthActionPerformed
        int month, day;
        if (MonthText.getText().matches("[0-9]+") && DayText.getText().matches("[0-9]+")) {
            month = Integer.parseInt(MonthText.getText());
            day = Integer.parseInt(DayText.getText());
            String msg = UtilityFunctions.RetrieveRecord(jTable1, month, day);
            LabelStatus.setText(msg);
        } else {
            LabelStatus.setText("Status: Enter numeric input only!eg:for MAY=05");
        }
        MonthText.setText("Month Number?");
        DayText.setText("Day?");
    }//GEN-LAST:event_retrievedaymonthActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        int month, day, rise, set;
        if (UpdateMonthText.getText().matches("[0-9]+") && UpdateDayText.getText().matches("[0-9]+") && UpdateRiseText.getText().matches("[0-9]+") && UpdateSetText.getText().matches("[0-9]+")) {
            month = Integer.parseInt(UpdateMonthText.getText());
            day = Integer.parseInt(UpdateDayText.getText());
            rise = Integer.parseInt(UpdateRiseText.getText());
            set = Integer.parseInt(UpdateSetText.getText());
            String msg = UtilityFunctions.updateRecord(jTable1, month, day, rise, set);
            LabelStatus.setText(msg);
        } else {
            LabelStatus.setText("Status: Enter numeric input only!eg:for MAY=05");
        }
        UpdateMonthText.setText("");
        UpdateDayText.setText("");
        UpdateRiseText.setText("");
        UpdateSetText.setText("");
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void ReadcsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadcsvActionPerformed
        LabelStatus.setText("Status: Reading sunrise-sunset.csv file...");
        list = MP2Utilities.readCSV();
        //Encapsulating the date and list objects into Persistent Object...
        date = new Date();
        pObject = new PersistentObject(date, list);

        //Recording the start of serialization...
       
        start_time = pObject.getCurrent_timestamp();
        LabelStatus.setText("Status: Reading .CSV file Completed!");
    }//GEN-LAST:event_ReadcsvActionPerformed

    private void SerializeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SerializeActionPerformed
        LabelStatus.setText("Status: Serialization started...");
        MP2Utilities.serializeObject(pObject);

        // Wait 10 secs...
        try {
            System.out.println("\nWaiting 10 seconds...");
            Thread.sleep(10000);
        } catch (InterruptedException ex) {
            Logger.getLogger(SolsticeEquinoxAnalysis.class.getName()).log(Level.SEVERE, null, ex);
        }
        LabelStatus.setText("Status: Serialization Completed!");
    }//GEN-LAST:event_SerializeActionPerformed

    private void DeserializeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeserializeActionPerformed
        LabelStatus.setText("Status: De-Serialization from daylight-record.ser started...");
        pObject1 = MP2Utilities.deserializeListObject();
        end_time=new Date();
        //Deserialize the persisted object into a date object and an ArrayList object..
        Date deserializedDate;
        ArrayList deserializedDaylightRecords;
        deserializedDate = pObject1.getCurrent_timestamp();
        deserializedDaylightRecords = (ArrayList) pObject1.getArrayList();
        LabelStatus.setText("Status: De-Serialization Completed!");
        

    }//GEN-LAST:event_DeserializeActionPerformed

    private void TimeDifferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeDifferenceActionPerformed
        long time_difference;
        time_difference = (end_time.getTime() - start_time.getTime());
        TimeDifferenceLabel.setText("Delta Time:= " + time_difference + " (in milliseconds)");

    }//GEN-LAST:event_TimeDifferenceActionPerformed

    private void CreateCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateCSVActionPerformed
       LabelStatus.setText("Status: Creating .csv file...");
       sb = MP2Utilities.createCSVfile(pObject1);
       LabelStatus.setText("Status: .CSV file Created Successfully!");
    }//GEN-LAST:event_CreateCSVActionPerformed

    private void WriteFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WriteFileButtonActionPerformed
        
        LabelStatus.setText("Status: Writing all records to daylight-records.txt file...");
        MP2Utilities.writeCSVfile(sb);
        LabelStatus.setText("Status: Writing Completed!");
    }//GEN-LAST:event_WriteFileButtonActionPerformed

    private void ExecuteDataAnalyticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteDataAnalyticsActionPerformed
        
        LabelStatus.setText("Status: Executing Data Analytics...");
        PersistentObject po1, po2, po3, po4;
        po1 = new PersistentObject(date, list);
        po2 = new PersistentObject(date, list);
        po3 = new PersistentObject(date, list);
        po4 = new PersistentObject(date, list);

        WinterSolstice ws = new WinterSolstice();
        int result=ws.compare(po1, po2);
        WinterSolsticeText.setText(ws.getMonth_of_winter_solstice() + "/" + ws.getDate_of_winter_solstice() + "/2013");
        
        SummerSolstice ss = new SummerSolstice();
        result=ss.compare(po3, po4);
        SummerSolsticeText.setText(ss.getMonth_of_summer_solstice() + "/" + ss.getDate_of_summer_solstice() + "/2013");
        
        Equinox eq = new Equinox();
        result=eq.compare(po1, po2);
        AutumnalEquinoxText.setText(eq.getMonth_of_autumnal_equinox() + "/" + eq.getDate_of_autumnal_equinox() + "/2013");
        
        VernalEquinox veq = new VernalEquinox();
        result=veq.compare(po1, po2);
        VernalEquinoxText.setText(veq.getMonth_of_vernal_equinox() + "/" + veq.getDate_of_vernal_equinox() + "/2013");
        
        LabelStatus.setText("Status: Data Analytics Executed!");
        
    }//GEN-LAST:event_ExecuteDataAnalyticsActionPerformed

    private void createTable() {
        try {
            String sql = "drop table SunriseSunset";
            //String sql1="create table SunriseSunset(day int,janrise int,janset int,febrise int,febset int,marrise int,marset int,aprrise int,aprset int,mayrise int,mayset int,junrise int,junset int,julrise int,julset int,augrise int,augset int,seprise int,sepset int,octrise int,octset int,novrise int,novset int,decrise int,decset int);";
            String sql1 = "create table SunriseSunset(month int,day int,sunrise int,sunset int,primary key (month,day));";
            Connection conn = getConnection();
            PreparedStatement prepareStatement1 = conn.prepareStatement(sql);
            PreparedStatement prepareStatement2 = conn.prepareStatement(sql1);
            prepareStatement1.executeUpdate();
            prepareStatement2.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(SolsticeEquinoxAnalysis.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void populateTable() {

        try {

            BufferedReader br = null;
            String line = null;
            Record daylightRecord = new Record();
            Connection conn = getConnection();
            PreparedStatement deleteStmt = conn.prepareStatement("delete from SunriseSunset");
            deleteStmt.executeUpdate();
            PreparedStatement prepareStatement1 = conn.prepareStatement("insert into SunriseSunset values(?,?,?,?)");
            //Reading from the .csv file
            br = new BufferedReader(new FileReader("data/sunrise-sunset.csv"));

            while ((line = br.readLine()) != null) {

                String[] split = line.split("[\\r\\n]+");
                String[] split1 = line.split(",");          //split1 is an array of all tokens separated by ','
                daylightRecord.setDate(Integer.parseInt(split1[0]));      //storing the first element of every line in day variable
                int x, month = 1;
                for (x = 1; x <= 24; x++) {

                    if (split1[x] == null || split1[x].isEmpty()) {   // Condition for handling months with 29 and 30 days only
                        split1[x] = "0";
                    }
                    if (split1[x + 1] == null || split1[x + 1].isEmpty()) {
                        split1[x + 1] = "0";
                    }
                    daylightRecord.setSunrise(Integer.parseInt(split1[x]));
                    daylightRecord.setSunset(Integer.parseInt(split1[x + 1]));

                    x++;
                    daylightRecord.setMonth(month);
                    //daylightRecord = new DaylightRecord(daylightRecord.getMonth(), daylightRecord.getDate(), daylightRecord.getSunrise(), daylightRecord.getSunset());     // Creating a DaylightRecord object 
                    if (daylightRecord.getSunrise() == 0 || daylightRecord.getSunset() == 0) {

                        month++;
                        continue;

                    } else {
                        prepareStatement1.setInt(1, daylightRecord.getMonth());
                        prepareStatement1.setInt(2, daylightRecord.getDate());
                        prepareStatement1.setInt(3, daylightRecord.getSunrise());
                        prepareStatement1.setInt(4, daylightRecord.getSunset());

                        prepareStatement1.executeUpdate();
                        month++;
                    }
                }

            }


        } catch (SQLException ex) {
            Logger.getLogger(SolsticeEquinoxAnalysis.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SolsticeEquinoxAnalysis.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SolsticeEquinoxAnalysis.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static Connection getConnection() {

        Connection conn = null;
        try {

            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/itm411db", "root", "tejalgajare");
        } catch (SQLException ex) {
            Logger.getLogger(SolsticeEquinoxAnalysis.class.getName()).log(Level.SEVERE, null, ex);
        }
        return conn;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SolsticeEquinoxAnalysis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SolsticeEquinoxAnalysis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SolsticeEquinoxAnalysis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SolsticeEquinoxAnalysis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SolsticeEquinoxAnalysis().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AutumnalEquinoxLabel;
    private javax.swing.JTextField AutumnalEquinoxText;
    private javax.swing.JPanel CRUD;
    private javax.swing.JButton CreateCSV;
    private javax.swing.JLabel CreateDayLabel;
    private javax.swing.JTextField CreateDayText;
    private javax.swing.JLabel CreateMonthLabel;
    private javax.swing.JTextField CreateMonthText;
    private javax.swing.JPanel CreatePanel;
    private javax.swing.JLabel CreateRiseLabel;
    private javax.swing.JTextField CreateRiseText;
    private javax.swing.JLabel CreateSetLabel;
    private javax.swing.JTextField CreateSetText;
    private javax.swing.JPanel DataAnalyticsPanel;
    private javax.swing.JLabel DateLabel;
    private javax.swing.JTextField DayText;
    private javax.swing.JButton Delete;
    private javax.swing.JTextField DeleteDay;
    private javax.swing.JTextField DeleteMonth;
    private javax.swing.JPanel DeletePanel;
    private javax.swing.JButton Deserialize;
    private javax.swing.JButton ExecuteDataAnalytics;
    private javax.swing.JLabel LabelStatus;
    private javax.swing.JPanel MainContainer;
    private javax.swing.JTabbedPane MenuContainer;
    private javax.swing.JTextField MonthText;
    private javax.swing.JButton Readcsv;
    private javax.swing.JButton Reset;
    private javax.swing.JPanel Serialization;
    private javax.swing.JPanel SerializationPanel;
    private javax.swing.JButton Serialize;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JLabel SummerSolsticeLabel;
    private javax.swing.JTextField SummerSolsticeText;
    private javax.swing.JButton TimeDifference;
    private javax.swing.JLabel TimeDifferenceLabel;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel UpdateDayLabel;
    private javax.swing.JTextField UpdateDayText;
    private javax.swing.JLabel UpdateMonthLabel;
    private javax.swing.JTextField UpdateMonthText;
    private javax.swing.JLabel UpdateRiseLabel;
    private javax.swing.JTextField UpdateRiseText;
    private javax.swing.JLabel UpdateSetLabel;
    private javax.swing.JTextField UpdateSetText;
    private javax.swing.JLabel VernalEquinoxLabel;
    private javax.swing.JTextField VernalEquinoxText;
    private javax.swing.JLabel WinterSolsticeLabel;
    private javax.swing.JTextField WinterSolsticeText;
    private javax.swing.JButton WriteFileButton;
    private javax.swing.JButton create;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel panelretrievedaymonth;
    private javax.swing.JPanel panelupdate;
    private javax.swing.JButton retrieveall;
    private javax.swing.JButton retrievedaymonth;
    // End of variables declaration//GEN-END:variables
}
